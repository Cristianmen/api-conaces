# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: login

custom: 
  tableName: 'login-table-${self:provider.stage}'
  repoName: 'repo-table-${self:provider.stage}'
  eventName: 'event-table-${self:provider.stage}'
  foroName: 'foro-table-${self:provider.stage}'
  pregName: 'preg-table-${self:provider.stage}'

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: "dev"
  iamRoleStatements:
    - Effect: "Allow"
      Action:        
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem 
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem

      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"]}
        - { "Fn::GetAtt": ["ReposDynamoDBTable", "Arn"]}
        - { "Fn::GetAtt": ["EventsDynamoDBTable", "Arn"]}
        - { "Fn::GetAtt": ["ForosDynamoDBTable", "Arn"]}
        - { "Fn::GetAtt": ["PregsDynamoDBTable", "Arn"]}

  environment:
    USERS_TABLE: ${self:custom.tableName}
    REPOS_TABLE: ${self:custom.repoName}
    EVENT_TABLE: ${self:custom.eventName}
    FORO_TABLE: ${self:custom.foroName}
    PREG_TABLE: ${self:custom.pregName}

functions:
  app:
    handler: app.generic
    events:
      - http: 
          path: ANY /
          method: get
      

resources:
  Resources:
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ReposDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.repoName}
        AttributeDefinitions:
          - AttributeName: repoId
            AttributeType: S
        KeySchema:
          - AttributeName: repoId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    EventsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.eventName}
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ForosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.foroName}
        AttributeDefinitions:
          - AttributeName: foroId
            AttributeType: S
        KeySchema:
          - AttributeName: foroId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    PregsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.pregName}
        AttributeDefinitions:
          - AttributeName: preguntasId
            AttributeType: S
        KeySchema:
          - AttributeName: preguntasId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1